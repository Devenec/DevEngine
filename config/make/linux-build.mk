#
# config/make/linux-build.mk
#

COMPILER_INCLUDE_DIRECTORIES = $(addprefix -I, $(INCLUDE_DIRECTORIES))
COMPILER_STATIC_LIBRARIES	 = $(addprefix -l, $(STATIC_LIBRARIES))
DEPENDENCIES_DIRECTORY		 = $(BUILD_INTERMEDIATE_DIRECTORY)/dependencies
BUILD_DIRECTORIES			 = $(DEPENDENCIES_DIRECTORY) $(BUILD_OUTPUT_DIRECTORY)
DEPENDENCY_FLAGS			 = -MMD -MP -MF $(DEPENDENCIES_DIRECTORY)/$*.d
VPATH						 = $(SOURCE_DIRECTORIES)

SOURCE_OBJECT_FILES = $(SOURCE_FILES:.c=.o)
SOURCE_OBJECT_FILES += $(SOURCE_FILES:.cpp=.o)
OBJECT_FILES		= $(addprefix $(BUILD_INTERMEDIATE_DIRECTORY)/, $(filter %.o, $(notdir $(SOURCE_OBJECT_FILES))))
LIBRARIES			= $(addprefix $(BUILD_OUTPUT_DIRECTORY)/lib, $(addsuffix .a, $(LIBRARY_PREREQUISITES)))


ifeq ($(TARGET_LANGUAGE), c)
	COMPILER			  = $(C_COMPILER)
	COMPILER_FLAGS		  = $(C_COMPILER_FLAGS)
	LINKER_FLAGS		  = $(C_LINKER_FLAGS)
	SOURCE_FILE_EXTENSION = .c
else ifeq ($(TARGET_LANGUAGE), c++)
	COMPILER			  = $(C++_COMPILER)
	COMPILER_FLAGS		  = $(C++_COMPILER_FLAGS)
	LINKER_FLAGS		  = $(C++_LINKER_FLAGS)
	SOURCE_FILE_EXTENSION = .cpp
else
$(error The target language is invalid ($(TARGET_LANGUAGE)).)
endif

COMPILER_COMMAND = $(COMPILER) $(COMPILER_FLAGS) $(PREPROCESSOR_FLAGS) $(COMPILER_INCLUDE_DIRECTORIES) \
	$(DEPENDENCY_FLAGS) -c $< -o $@


ifeq ($(TARGET_OUTPUT_TYPE), static)
	BUILD_OUTPUT_FILE = $(BUILD_OUTPUT_DIRECTORY)/lib$(TARGET_NAME).a
	LINKER_COMMAND	  = $(ARCHIVER) $(ARCHIVER_FLAGS) $@ $^
else ifeq ($(TARGET_OUTPUT_TYPE), shared)
	BUILD_OUTPUT_FILE = $(BUILD_OUTPUT_DIRECTORY)/lib$(TARGET_NAME).so
	LINKER_COMMAND	  = $(COMPILER) $(LINKER_FLAGS) $(LINKER_SHARED_FLAGS) $^ $(COMPILER_STATIC_LIBRARIES) -o $@
else ifeq ($(TARGET_OUTPUT_TYPE), executable)
	BUILD_OUTPUT_FILE = $(BUILD_OUTPUT_DIRECTORY)/$(TARGET_NAME)
	LINKER_COMMAND	  = $(COMPILER) $(LINKER_FLAGS) $^ $(COMPILER_STATIC_LIBRARIES) -o $@
else
$(error The target output type is invalid ($(TARGET_OUTPUT_TYPE)).)
endif


# Rules

all: $(BUILD_OUTPUT_FILE)

$(BUILD_OUTPUT_FILE): $(OBJECT_FILES) $(LIBRARIES)
	$(LINKER_COMMAND)

$(OBJECT_FILES): $(BUILD_INTERMEDIATE_DIRECTORY)/%.o: %$(SOURCE_FILE_EXTENSION) | $(BUILD_DIRECTORIES)
	$(COMPILER_COMMAND)

-include $(DEPENDENCIES_DIRECTORY)/*.d

$(BUILD_DIRECTORIES):
	mkdir -p $@

.PHONY: clean
clean:
	rm -f -- $(BUILD_OUTPUT_FILE) $(OBJECT_FILES) $(DEPENDENCIES_DIRECTORY)/*.d
